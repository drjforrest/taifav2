-- Intelligence Reports Table for AI-generated ecosystem analysis
-- Stores reports generated by Perplexity and other AI intelligence providers

CREATE TABLE IF NOT EXISTS intelligence_reports (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    
    -- Report metadata
    report_id VARCHAR(255) UNIQUE NOT NULL,
    title TEXT NOT NULL,
    provider VARCHAR(50) NOT NULL, -- 'perplexity', 'openai', etc.
    report_type VARCHAR(100) NOT NULL, -- 'innovation_discovery', 'funding_landscape', etc.
    
    -- Report content
    summary TEXT NOT NULL,
    key_findings JSONB DEFAULT '[]'::jsonb,
    innovations_mentioned JSONB DEFAULT '[]'::jsonb,
    funding_updates JSONB DEFAULT '[]'::jsonb,
    policy_developments JSONB DEFAULT '[]'::jsonb,
    
    -- Quality and validation
    confidence_score FLOAT DEFAULT 0.0,
    validation_flags JSONB DEFAULT '[]'::jsonb,
    
    -- Sources and evidence
    sources JSONB DEFAULT '[]'::jsonb,
    extracted_citations JSONB DEFAULT '[]'::jsonb,
    
    -- Geographic and temporal scope
    geographic_focus JSONB DEFAULT '[]'::jsonb,
    time_period_analyzed VARCHAR(100),
    
    -- Action items
    follow_up_actions JSONB DEFAULT '[]'::jsonb,
    
    -- Timestamps
    generation_timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_intelligence_reports_provider ON intelligence_reports(provider);
CREATE INDEX IF NOT EXISTS idx_intelligence_reports_type ON intelligence_reports(report_type);
CREATE INDEX IF NOT EXISTS idx_intelligence_reports_generation_timestamp ON intelligence_reports(generation_timestamp);
CREATE INDEX IF NOT EXISTS idx_intelligence_reports_confidence ON intelligence_reports(confidence_score);

-- Create composite index for common queries
CREATE INDEX IF NOT EXISTS idx_intelligence_reports_provider_type_timestamp ON intelligence_reports(provider, report_type, generation_timestamp DESC);

-- Create GIN indexes for JSONB fields for efficient searching
CREATE INDEX IF NOT EXISTS idx_intelligence_reports_key_findings ON intelligence_reports USING GIN (key_findings);
CREATE INDEX IF NOT EXISTS idx_intelligence_reports_innovations_mentioned ON intelligence_reports USING GIN (innovations_mentioned);
CREATE INDEX IF NOT EXISTS idx_intelligence_reports_geographic_focus ON intelligence_reports USING GIN (geographic_focus);

-- Add comments for documentation
COMMENT ON TABLE intelligence_reports IS 'AI-generated intelligence reports for African AI ecosystem analysis';
COMMENT ON COLUMN intelligence_reports.report_id IS 'Unique identifier for the report (from AI provider)';
COMMENT ON COLUMN intelligence_reports.provider IS 'AI service provider (perplexity, openai, etc.)';
COMMENT ON COLUMN intelligence_reports.report_type IS 'Type of intelligence report (innovation_discovery, funding_landscape, etc.)';
COMMENT ON COLUMN intelligence_reports.confidence_score IS 'AI confidence score for the report (0.0 to 1.0)';
COMMENT ON COLUMN intelligence_reports.key_findings IS 'Array of key findings from the intelligence analysis';
COMMENT ON COLUMN intelligence_reports.innovations_mentioned IS 'Structured data about innovations mentioned in the report';
COMMENT ON COLUMN intelligence_reports.funding_updates IS 'Array of funding announcements and investment information';
COMMENT ON COLUMN intelligence_reports.sources IS 'Array of source URLs and references used in the report';
COMMENT ON COLUMN intelligence_reports.geographic_focus IS 'Array of countries/regions covered in the analysis';
COMMENT ON COLUMN intelligence_reports.extracted_citations IS 'Structured citations for snowball sampling';

-- Create view for recent intelligence reports summary
CREATE OR REPLACE VIEW recent_intelligence_summary AS
SELECT 
    provider,
    report_type,
    COUNT(*) as report_count,
    AVG(confidence_score) as avg_confidence,
    MAX(generation_timestamp) as latest_report,
    COUNT(CASE WHEN generation_timestamp > NOW() - INTERVAL '7 days' THEN 1 END) as reports_last_week
FROM intelligence_reports
GROUP BY provider, report_type
ORDER BY latest_report DESC;

-- Create view for intelligence coverage analysis
CREATE OR REPLACE VIEW intelligence_coverage_analysis AS
SELECT 
    DATE_TRUNC('day', generation_timestamp) as report_date,
    provider,
    report_type,
    COUNT(*) as daily_reports,
    AVG(confidence_score) as avg_daily_confidence,
    COUNT(DISTINCT jsonb_array_length(geographic_focus)) as geographic_coverage
FROM intelligence_reports
WHERE generation_timestamp > NOW() - INTERVAL '30 days'
GROUP BY DATE_TRUNC('day', generation_timestamp), provider, report_type
ORDER BY report_date DESC;

COMMENT ON VIEW recent_intelligence_summary IS 'Summary of recent intelligence reports by provider and type';
COMMENT ON VIEW intelligence_coverage_analysis IS 'Daily analysis of intelligence report coverage and quality';